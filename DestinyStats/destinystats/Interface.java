/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package destinystats;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JOptionPane;

/**
 *
 * @author Player Ghost
 */
public class Interface extends javax.swing.JFrame {
    Season8 season8;
    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
        season8 = new Season8();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pane = new javax.swing.JTabbedPane();
        paneHome = new javax.swing.JPanel();
        labelWelcome = new javax.swing.JLabel();
        buttonBuild = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        labelEscolha = new javax.swing.JLabel();
        paneDatabase = new javax.swing.JPanel();
        labelInstrução1 = new javax.swing.JLabel();
        buttonClasses = new javax.swing.JButton();
        buttonSubclasses = new javax.swing.JButton();
        buttonArmors = new javax.swing.JButton();
        buttonExoticArmors = new javax.swing.JButton();
        buttonWeapons = new javax.swing.JButton();
        buttonExoticWeapons = new javax.swing.JButton();
        buttonOrnaments = new javax.swing.JButton();
        paneAdd = new javax.swing.JPanel();
        labelInstrução = new javax.swing.JLabel();
        buttonAddClass = new javax.swing.JButton();
        buttonAddSubclass = new javax.swing.JButton();
        buttonAddArmor = new javax.swing.JButton();
        buttonAddExoticArmor = new javax.swing.JButton();
        buttonAddWeapon = new javax.swing.JButton();
        buttonAddExoticWeapon = new javax.swing.JButton();
        buttonAddOrnament = new javax.swing.JButton();
        buttonLocalSave = new javax.swing.JButton();
        buttonLocalImport = new javax.swing.JButton();
        paneRemove = new javax.swing.JPanel();
        labelInstrução2 = new javax.swing.JLabel();
        buttonRemoveClass = new javax.swing.JButton();
        buttonRemoveSubclass = new javax.swing.JButton();
        buttonRemoveArmor = new javax.swing.JButton();
        buttonRemoveExoticArmor = new javax.swing.JButton();
        buttonRemoveWeapon = new javax.swing.JButton();
        buttonRemoveExoticWeapon = new javax.swing.JButton();
        buttonRemoveOrnament = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        paneHome.setBackground(new java.awt.Color(0, 0, 0));

        labelWelcome.setBackground(new java.awt.Color(255, 0, 0));
        labelWelcome.setFont(new java.awt.Font("Castellar", 1, 15)); // NOI18N
        labelWelcome.setForeground(new java.awt.Color(255, 0, 0));
        labelWelcome.setText("Bem vindo ao Destiny 2 database!");

        buttonBuild.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonBuild.setText("Consultar database");
        buttonBuild.setToolTipText("");
        buttonBuild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBuildActionPerformed(evt);
            }
        });

        buttonAdd.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonAdd.setText("Adicionar");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        labelEscolha.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        labelEscolha.setForeground(new java.awt.Color(255, 255, 255));
        labelEscolha.setText("Escolha o que deseja fazer:");

        javax.swing.GroupLayout paneHomeLayout = new javax.swing.GroupLayout(paneHome);
        paneHome.setLayout(paneHomeLayout);
        paneHomeLayout.setHorizontalGroup(
            paneHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneHomeLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(labelWelcome)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneHomeLayout.createSequentialGroup()
                .addGap(0, 186, Short.MAX_VALUE)
                .addGroup(paneHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonBuild))
                .addGap(175, 175, 175))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneHomeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelEscolha)
                .addGap(127, 127, 127))
        );
        paneHomeLayout.setVerticalGroup(
            paneHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(labelEscolha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(buttonBuild)
                .addGap(28, 28, 28)
                .addComponent(buttonAdd)
                .addGap(85, 85, 85))
        );

        pane.addTab("Home", paneHome);

        paneDatabase.setBackground(new java.awt.Color(0, 0, 0));

        labelInstrução1.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        labelInstrução1.setForeground(new java.awt.Color(255, 255, 255));
        labelInstrução1.setText("Escolha o que deseja ver");

        buttonClasses.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonClasses.setText("Classes");
        buttonClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClassesActionPerformed(evt);
            }
        });

        buttonSubclasses.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonSubclasses.setText("Subclasses");
        buttonSubclasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubclassesActionPerformed(evt);
            }
        });

        buttonArmors.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonArmors.setForeground(new java.awt.Color(70, 39, 89));
        buttonArmors.setText("Armaduras");
        buttonArmors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonArmorsActionPerformed(evt);
            }
        });

        buttonExoticArmors.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonExoticArmors.setForeground(new java.awt.Color(206, 174, 51));
        buttonExoticArmors.setText("Armaduras exóticas");
        buttonExoticArmors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExoticArmorsActionPerformed(evt);
            }
        });

        buttonWeapons.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonWeapons.setForeground(new java.awt.Color(70, 39, 89));
        buttonWeapons.setText("Armas");
        buttonWeapons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWeaponsActionPerformed(evt);
            }
        });

        buttonExoticWeapons.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonExoticWeapons.setForeground(new java.awt.Color(206, 174, 51));
        buttonExoticWeapons.setText("Armas exóticas");
        buttonExoticWeapons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExoticWeaponsActionPerformed(evt);
            }
        });

        buttonOrnaments.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonOrnaments.setForeground(new java.awt.Color(206, 174, 51));
        buttonOrnaments.setText("Ornamentos");
        buttonOrnaments.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOrnamentsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneDatabaseLayout = new javax.swing.GroupLayout(paneDatabase);
        paneDatabase.setLayout(paneDatabaseLayout);
        paneDatabaseLayout.setHorizontalGroup(
            paneDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneDatabaseLayout.createSequentialGroup()
                .addGroup(paneDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneDatabaseLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(paneDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonSubclasses, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(buttonClasses, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(paneDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonExoticArmors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonArmors, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonOrnaments, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(paneDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonWeapons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonExoticWeapons, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)))
                    .addGroup(paneDatabaseLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(labelInstrução1)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        paneDatabaseLayout.setVerticalGroup(
            paneDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneDatabaseLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(labelInstrução1)
                .addGap(18, 18, 18)
                .addGroup(paneDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonClasses)
                    .addComponent(buttonArmors)
                    .addComponent(buttonWeapons))
                .addGap(40, 40, 40)
                .addGroup(paneDatabaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonExoticWeapons)
                    .addComponent(buttonExoticArmors)
                    .addComponent(buttonSubclasses))
                .addGap(40, 40, 40)
                .addComponent(buttonOrnaments)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        pane.addTab("Database", paneDatabase);

        paneAdd.setBackground(new java.awt.Color(0, 0, 0));

        labelInstrução.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        labelInstrução.setForeground(new java.awt.Color(255, 255, 255));
        labelInstrução.setText("Escolha o que deseja adicionar");

        buttonAddClass.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonAddClass.setText("Classe");
        buttonAddClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddClassActionPerformed(evt);
            }
        });

        buttonAddSubclass.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonAddSubclass.setText("Subclasse");
        buttonAddSubclass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddSubclassActionPerformed(evt);
            }
        });

        buttonAddArmor.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonAddArmor.setForeground(new java.awt.Color(70, 39, 89));
        buttonAddArmor.setText("Armadura");
        buttonAddArmor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddArmorActionPerformed(evt);
            }
        });

        buttonAddExoticArmor.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonAddExoticArmor.setForeground(new java.awt.Color(206, 174, 51));
        buttonAddExoticArmor.setText("Armadura exótica");
        buttonAddExoticArmor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddExoticArmorActionPerformed(evt);
            }
        });

        buttonAddWeapon.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonAddWeapon.setForeground(new java.awt.Color(70, 39, 89));
        buttonAddWeapon.setText("Arma");
        buttonAddWeapon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddWeaponActionPerformed(evt);
            }
        });

        buttonAddExoticWeapon.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonAddExoticWeapon.setForeground(new java.awt.Color(206, 174, 51));
        buttonAddExoticWeapon.setText("Arma exótica");
        buttonAddExoticWeapon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddExoticWeaponActionPerformed(evt);
            }
        });

        buttonAddOrnament.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonAddOrnament.setForeground(new java.awt.Color(206, 174, 51));
        buttonAddOrnament.setText("Ornamento");
        buttonAddOrnament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddOrnamentActionPerformed(evt);
            }
        });

        buttonLocalSave.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        buttonLocalSave.setText("Salvar localmente");
        buttonLocalSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLocalSaveActionPerformed(evt);
            }
        });

        buttonLocalImport.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        buttonLocalImport.setText("Importar localmente");
        buttonLocalImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLocalImportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneAddLayout = new javax.swing.GroupLayout(paneAdd);
        paneAdd.setLayout(paneAddLayout);
        paneAddLayout.setHorizontalGroup(
            paneAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneAddLayout.createSequentialGroup()
                .addGroup(paneAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneAddLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(paneAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonAddSubclass, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(buttonAddClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonLocalImport))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(paneAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneAddLayout.createSequentialGroup()
                                .addGroup(paneAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonAddExoticArmor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonAddArmor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonAddOrnament, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(paneAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(buttonAddWeapon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonAddExoticWeapon, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)))
                            .addComponent(buttonLocalSave, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(paneAddLayout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(labelInstrução)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        paneAddLayout.setVerticalGroup(
            paneAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneAddLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(labelInstrução)
                .addGap(18, 18, 18)
                .addGroup(paneAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAddClass)
                    .addComponent(buttonAddArmor)
                    .addComponent(buttonAddWeapon))
                .addGap(40, 40, 40)
                .addGroup(paneAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAddExoticWeapon)
                    .addComponent(buttonAddExoticArmor)
                    .addComponent(buttonAddSubclass))
                .addGap(40, 40, 40)
                .addComponent(buttonAddOrnament)
                .addGap(18, 18, 18)
                .addGroup(paneAddLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonLocalSave)
                    .addComponent(buttonLocalImport))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pane.addTab("Add", paneAdd);

        paneRemove.setBackground(new java.awt.Color(0, 0, 0));

        labelInstrução2.setFont(new java.awt.Font("Dialog", 1, 20)); // NOI18N
        labelInstrução2.setForeground(new java.awt.Color(255, 255, 255));
        labelInstrução2.setText("Escolha o que deseja remover");

        buttonRemoveClass.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonRemoveClass.setText("Classe");
        buttonRemoveClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveClassActionPerformed(evt);
            }
        });

        buttonRemoveSubclass.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonRemoveSubclass.setText("Subclasse");
        buttonRemoveSubclass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveSubclassActionPerformed(evt);
            }
        });

        buttonRemoveArmor.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonRemoveArmor.setForeground(new java.awt.Color(70, 39, 89));
        buttonRemoveArmor.setText("Armadura");
        buttonRemoveArmor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveArmorActionPerformed(evt);
            }
        });

        buttonRemoveExoticArmor.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonRemoveExoticArmor.setForeground(new java.awt.Color(206, 174, 51));
        buttonRemoveExoticArmor.setText("Armadura exótica");
        buttonRemoveExoticArmor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveExoticArmorActionPerformed(evt);
            }
        });

        buttonRemoveWeapon.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonRemoveWeapon.setForeground(new java.awt.Color(70, 39, 89));
        buttonRemoveWeapon.setText("Arma");
        buttonRemoveWeapon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveWeaponActionPerformed(evt);
            }
        });

        buttonRemoveExoticWeapon.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonRemoveExoticWeapon.setForeground(new java.awt.Color(206, 174, 51));
        buttonRemoveExoticWeapon.setText("Arma exótica");
        buttonRemoveExoticWeapon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveExoticWeaponActionPerformed(evt);
            }
        });

        buttonRemoveOrnament.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        buttonRemoveOrnament.setForeground(new java.awt.Color(206, 174, 51));
        buttonRemoveOrnament.setText("Ornamento");
        buttonRemoveOrnament.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveOrnamentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneRemoveLayout = new javax.swing.GroupLayout(paneRemove);
        paneRemove.setLayout(paneRemoveLayout);
        paneRemoveLayout.setHorizontalGroup(
            paneRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneRemoveLayout.createSequentialGroup()
                .addGroup(paneRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(paneRemoveLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(paneRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonRemoveSubclass, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(buttonRemoveClass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(paneRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonRemoveExoticArmor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonRemoveArmor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonRemoveOrnament, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(paneRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonRemoveWeapon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonRemoveExoticWeapon, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)))
                    .addGroup(paneRemoveLayout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(labelInstrução2)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        paneRemoveLayout.setVerticalGroup(
            paneRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneRemoveLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(labelInstrução2)
                .addGap(18, 18, 18)
                .addGroup(paneRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRemoveClass)
                    .addComponent(buttonRemoveArmor)
                    .addComponent(buttonRemoveWeapon))
                .addGap(40, 40, 40)
                .addGroup(paneRemoveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRemoveExoticWeapon)
                    .addComponent(buttonRemoveExoticArmor)
                    .addComponent(buttonRemoveSubclass))
                .addGap(40, 40, 40)
                .addComponent(buttonRemoveOrnament)
                .addContainerGap(67, Short.MAX_VALUE))
        );

        pane.addTab("Remove", paneRemove);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBuildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBuildActionPerformed
        this.pane.setSelectedIndex(1);
    }//GEN-LAST:event_buttonBuildActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        this.pane.setSelectedIndex(2);
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonAddWeaponActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddWeaponActionPerformed
        String nome = JOptionPane.showInputDialog(null, "Informe o nome da arma:");
        String description = JOptionPane.showInputDialog(null, "Informe a descrição da arma:");
        String type = JOptionPane.showInputDialog(null, "Informe o tipo da arma:");
        int impact, range, stability, handling, reloadSpeed, roundsPerMinute, magazine;

        try {
            impact = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o impacto:"));
        } catch (Exception e) {
            impact = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe o impacto:"));
        }

        try {
            range = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o alcance:"));
        } catch (Exception e) {
            range = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe o alcance:"));
        }

        try {
            stability = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe a estabilidade:"));
        } catch (Exception e) {
            stability = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe a estabilidade:"));
        }

        try {
            handling = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o manuseio:"));
        } catch (Exception e) {
            handling = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe o manuseio:"));
        }

        try {
            reloadSpeed = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe a velocidade de recarga:"));
        } catch (Exception e) {
            reloadSpeed = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe a velocidade de recarga:"));
        }

        try {
            roundsPerMinute = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe a cadência:"));
        } catch (Exception e) {
            roundsPerMinute = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe a cadência:"));
        }

        try {
            magazine = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o tamanho do carregador:"));
        } catch (Exception e) {
            magazine = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe o tamanho do carregador:"));
        }

        Weapon weapon = new Weapon(type, impact, range, stability, handling, reloadSpeed, roundsPerMinute, magazine, nome, description);
        int mod;
        
        try {
            mod = Integer.parseInt(JOptionPane.showInputDialog(null, "Essa arma tem mod? \n" + "1 - Sim \n" + "2 - Não"));
        } catch (Exception e) {
            mod = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE 1 OU 2 \n" + "Essa arma tem mod? \n" + "1 - Sim \n" + "2 - Não"));
        }
        
        if(mod == 1){
            int choice;
        
            try {
                choice = Integer.parseInt(JOptionPane.showInputDialog(null, "O mod da arma é de quantidade ou de porcentagem? \n" + "1 - Quantidade \n" + "2 - Porcentagem \n"));
            } catch (Exception e) {
                choice = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE 1 OU 2.\n" + "O mod da arma é de quantidade ou de porcentagem? \n" + "1 - Quantidade \n" + "2 - Porcentagem \n"));
            }

            if(choice == 1){
                int statsToIncremment;

                try {
                    statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe qual stat o mod irá incrementar: \n" + "1 - Impacto \n" + "2 - Alcance \n" + "3 - Estabilidade \n" + "4 - Manuseio \n" + "5 - Velocidade de recarga \n" + "6 - Cadencia \n" + "7 - Tamanho do carregador \n"));
                } catch (Exception e) {
                    statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE UM NÚMERO INTEIRO.\n" + "Informe qual stat o mod irá incrementar: \n" + "1 - Impacto \n" + "2 - Alcance \n" + "3 - Estabilidade \n" + "4 - Manuseio \n" + "5 - Velocidade de recarga \n" + "6 - Cadencia \n" + "7 - Tamanho do carregador \n"));
                }

                weapon.mod(statsToIncremment);
            }else if(choice == 2) {
                int statsToIncremment;

                try {
                    statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe qual stat o mod irá incrementar: \n" + "1 - Impacto \n" + "2 - Alcance \n" + "3 - Estabilidade \n" + "4 - Manuseio \n" + "5 - Velocidade de recarga \n" + "6 - Cadencia \n" + "7 - Tamanho do carregador \n"));
                } catch (Exception e) {
                    statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE UM NÚMERO INTEIRO.\n" + "Informe qual stat o mod irá incrementar: \n" + "1 - Impacto \n" + "2 - Alcance \n" + "3 - Estabilidade \n" + "4 - Manuseio \n" + "5 - Velocidade de recarga \n" + "6 - Cadencia \n" + "7 - Tamanho do carregador \n"));
                }

                double porcentagem;

                try {
                    porcentagem = Double.parseDouble(JOptionPane.showInputDialog(null, "Informa a porcentagem do mod"));
                } catch (Exception e) {
                    porcentagem = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS \n" + "Informa a porcentagem do mod"));
                }

                weapon.mod(statsToIncremment, porcentagem);
            }
        }

        season8.addWeapon(weapon);
    }//GEN-LAST:event_buttonAddWeaponActionPerformed

    private void buttonAddExoticArmorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddExoticArmorActionPerformed
        String nome = JOptionPane.showInputDialog(null, "Informe o nome da armadaura:");
        String description = JOptionPane.showInputDialog(null, "Informe a descrição da armadura:");
        String gearClass = JOptionPane.showInputDialog(null, "Informe a classe da armadura:");
        String exoticSpecialPerk = JOptionPane.showInputDialog(null, "Informe o perk especial exótico:");
        double mobility, resilience, recovery, discipline, intelect, strength;
        
        try {
            mobility = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe a mobilidade:"));
        } catch (Exception e) {
            mobility = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe a mobilidade:"));
        }

        try {
            resilience = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe a resiliência:"));
        } catch (Exception e) {
            resilience = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe a resiliência:"));
        }
        
        try {
            recovery = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe a recuperação:"));
        } catch (Exception e) {
            recovery = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe a recuperação:"));
        }

        try {
            discipline = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe a disciplina:"));
        } catch (Exception e) {
            discipline = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe a disciplina:"));
        }

        try {
            intelect = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe o intelectio:"));
        } catch (Exception e) {
            intelect = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe o intelectio:"));
        }

        try {
            strength = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe a força:"));
        } catch (Exception e) {
            strength = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe a força:"));
        }

        ArmorExotic armorExotic = new ArmorExotic(exoticSpecialPerk, gearClass, mobility, resilience, recovery, discipline, intelect, strength, nome, description);
        int catalyst;
        
        try {
            catalyst = Integer.parseInt(JOptionPane.showInputDialog(null, "Essa armadura tem catalizador? \n" + "1 - Sim \n" + "2 - Não"));
        } catch (Exception e) {
            catalyst = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE 1 OU 2 \n" + "Essa armadura tem catalizador? \n" + "1 - Sim \n" + "2 - Não"));
        }
        
        if(catalyst == 1){
            int statsToIncremment;
            
            try {
                statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe qual stat o catalizador irá incrementar: \n" + "1 - Mobilidade \n" + "2 - Resiliência \n" + "3 - Recuperação \n" + "4 - Disciplina \n" + "5 - Intelecto \n" + "6 - Força \n"));
            } catch (Exception e) {
                statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE UM NÚMERO INTEIRO.\n" + "Informe qual stat o mod irá incrementar: \n" + "1 - Mobilidade \n" + "2 - Resiliência \n" + "3 - Recuperação \n" + "4 - Disciplina \n" + "5 - Intelecto \n" + "6 - Força \n"));
            }
            
            armorExotic.catalyst(statsToIncremment);
        }
        
        season8.addArmorExotic(armorExotic);
    }//GEN-LAST:event_buttonAddExoticArmorActionPerformed

    private void buttonAddClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddClassActionPerformed
        String name = JOptionPane.showInputDialog(null, "Informe o nome da classe:");
        String race = JOptionPane.showInputDialog(null, "Informe o nome da raça:");

        Class classe = new Class(name, race);
        season8.addClass(classe);
    }//GEN-LAST:event_buttonAddClassActionPerformed

    private void buttonAddSubclassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddSubclassActionPerformed
        String name = JOptionPane.showInputDialog(null, "Informe o nome da classe da subclasse:");
        String race = JOptionPane.showInputDialog(null, "Informe o nome da raça da subclasse:");

        String subclassTypeName = JOptionPane.showInputDialog(null, "Informe o nome da subclasse:");
        String description = JOptionPane.showInputDialog(null, "Informe a descrição da subclasse:");
        Ability subclassType = new Ability(subclassTypeName, description);

        String superAbilityName = JOptionPane.showInputDialog(null, "Informe o nome da Super habilidade:");
        String superAbilityDescription = JOptionPane.showInputDialog(null, "Informe a descrição da Super habilidade:");
        Ability superAbility = new Ability(superAbilityName, superAbilityDescription);

        String jumpingAbilityName = JOptionPane.showInputDialog(null, "Informe o nome da habilidade de pulo:");
        String jumpingAbilityDescription = JOptionPane.showInputDialog(null, "Informe a descrição da habilidade de pulo:");
        Ability jumpingAbility = new Ability(jumpingAbilityName, jumpingAbilityDescription);

        String grenadeAbilityName = JOptionPane.showInputDialog(null, "Informe o nome da habilidade de granada:");
        String grenadeAbilityDescription = JOptionPane.showInputDialog(null, "Informe a descrição da habilidade de granada:");
        Ability grenadeAbility = new Ability(grenadeAbilityName, grenadeAbilityDescription);

        String classAbilityName = JOptionPane.showInputDialog(null, "Informe o nome da habilidade de classe:");
        String classAbilityDescription = JOptionPane.showInputDialog(null, "Informe a descrição da habilidade de classe:");
        Ability classAbility = new Ability(classAbilityName, classAbilityDescription);

        SubClass subClass = new SubClass(subclassType, superAbility, jumpingAbility, grenadeAbility, classAbility, name, race);
        season8.addSubclasses(subClass);
    }//GEN-LAST:event_buttonAddSubclassActionPerformed

    private void buttonAddArmorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddArmorActionPerformed
        String nome = JOptionPane.showInputDialog(null, "Informe o nome da armadaura:");
        String description = JOptionPane.showInputDialog(null, "Informe a descrição da armadura:");
        String gearClass = JOptionPane.showInputDialog(null, "Informe a classe da armadura:");
        double mobility, resilience, recovery, discipline, intelect, strength;

        try {
            mobility = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe a mobilidade:"));
        } catch (Exception e) {
            mobility = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe a mobilidade:"));
        }

        try {
            resilience = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe a resiliência:"));
        } catch (Exception e) {
            resilience = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe a resiliência:"));
        }

        try {
            recovery = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe a recuperação:"));
        } catch (Exception e) {
            recovery = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe a recuperação:"));
        }

        try {
            discipline = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe a disciplina:"));
        } catch (Exception e) {
            discipline = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe a disciplina:"));
        }

        try {
            intelect = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe o intelectio:"));
        } catch (Exception e) {
            intelect = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe o intelectio:"));
        }

        try {
            strength = Double.parseDouble(JOptionPane.showInputDialog(null, "Informe a força:"));
        } catch (Exception e) {
            strength = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS\n Informe a força:"));
        }

        Armor armor = new Armor(gearClass, mobility, resilience, recovery, discipline, intelect, strength, nome, description);
        int mod;
        
        try {
            mod = Integer.parseInt(JOptionPane.showInputDialog(null, "Essa armadura tem mod? \n" + "1 - Sim \n" + "2 - Não"));
        } catch (Exception e) {
            mod = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE 1 OU 2 \n" + "Essa armadura tem mod? \n" + "1 - Sim \n" + "2 - Não"));
        }
        
        if(mod == 1){
            int choice;
        
            try {
                choice = Integer.parseInt(JOptionPane.showInputDialog(null, "O mod da armadura é de quantidade ou de porcentagem? \n" + "1 - Quantidade \n" + "2 - Porcentagem \n"));
            } catch (Exception e) {
                choice = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE 1 OU 2.\n" + "O mod da armadura é de quantidade ou de porcentagem? \n" + "1 - Quantidade \n" + "2 - Porcentagem \n"));
            }

            if(choice == 1){
                int statsToIncremment;

                try {
                    statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe qual stat o mod irá incrementar: \n" + "1 - Mobilidade \n" + "2 - Resiliência \n" + "3 - Recuperação \n" + "4 - Disciplina \n" + "5 - Intelecto \n" + "6 - Força \n"));
                } catch (Exception e) {
                    statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE UM NÚMERO INTEIRO.\n" + "Informe qual stat o mod irá incrementar: \n" + "1 - Mobilidade \n" + "2 - Resiliência \n" + "3 - Recuperação \n" + "4 - Disciplina \n" + "5 - Intelecto \n" + "6 - Força \n"));
                }

                armor.mod(statsToIncremment);
            }else if(choice == 2) {
                int statsToIncremment;

                try {
                    statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe qual stat o mod irá incrementar: \n" + "1 - Mobilidade \n" + "2 - Resiliência \n" + "3 - Recuperação \n" + "4 - Disciplina \n" + "5 - Intelecto \n" + "6 - Força \n"));
                } catch (Exception e) {
                    statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE UM NÚMERO INTEIRO.\n" + "Informe qual stat o mod irá incrementar: \n" + "1 - Mobilidade \n" + "2 - Resiliência \n" + "3 - Recuperação \n" + "4 - Disciplina \n" + "5 - Intelecto \n" + "6 - Força \n"));
                }

                double porcentagem;

                try {
                    porcentagem = Double.parseDouble(JOptionPane.showInputDialog(null, "Informa a porcentagem do mod"));
                } catch (Exception e) {
                    porcentagem = Double.parseDouble(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS \n" + "Informa a porcentagem do mod"));
                }

                armor.mod(statsToIncremment, porcentagem);
            }
        }

        season8.addArmor(armor);
    }//GEN-LAST:event_buttonAddArmorActionPerformed

    private void buttonAddExoticWeaponActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddExoticWeaponActionPerformed
        String nome = JOptionPane.showInputDialog(null, "Informe o nome da arma:");
        String description = JOptionPane.showInputDialog(null, "Informe a descrição da arma:");
        String type = JOptionPane.showInputDialog(null, "Informe o tipo da arma:");
        String exoticSpecialPerk = JOptionPane.showInputDialog(null, "Informe o perk especial exótico:");
        int impact, range, stability, handling, reloadSpeed, roundsPerMinute, magazine;

        try {
            impact = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o impacto:"));
        } catch (Exception e) {
            impact = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe o impacto:"));
        }

        try {
            range = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o alcance:"));
        } catch (Exception e) {
            range = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe o alcance:"));
        }

        try {
            stability = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe a estabilidade:"));
        } catch (Exception e) {
            stability = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe a estabilidade:"));
        }

        try {
            handling = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o manuseio:"));
        } catch (Exception e) {
            handling = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe o manuseio:"));
        }

        try {
            reloadSpeed = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe a velocidade de recarga:"));
        } catch (Exception e) {
            reloadSpeed = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe a velocidade de recarga:"));
        }

        try {
            roundsPerMinute = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe a cadência:"));
        } catch (Exception e) {
            roundsPerMinute = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe a cadência:"));
        }

        try {
            magazine = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o tamanho do carregador:"));
        } catch (Exception e) {
            magazine = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS\n Informe o tamanho do carregador:"));
        }

        WeaponExotic weaponExotic = new WeaponExotic(exoticSpecialPerk, type, impact, range, stability, handling, reloadSpeed, roundsPerMinute, magazine, nome, description);
        int catalyst;
        
        try {
            catalyst = Integer.parseInt(JOptionPane.showInputDialog(null, "Essa arma tem catalizador? \n" + "1 - Sim \n" + "2 - Não"));
        } catch (Exception e) {
            catalyst = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE 1 OU 2 \n" + "Essa arma tem catalizador? \n" + "1 - Sim \n" + "2 - Não"));
        }
        
        if(catalyst == 1){
            int statsToIncremment;
            
            try {
                statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe qual stat o catalizador irá incrementar: \n" + "1 - Impacto \n" + "2 - Alcance \n" + "3 - Estabilidade \n" + "4 - Manuseio \n" + "5 - Velocidade de recarga \n" + "6 - Cadencia \n" + "7 - Tamanho do carregador \n"));
            } catch (Exception e) {
                statsToIncremment = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE UM NÚMERO INTEIRO.\n" + "Informe qual stat o catalizador irá incrementar: \n" + "1 - Impacto \n" + "2 - Alcance \n" + "3 - Estabilidade \n" + "4 - Manuseio \n" + "5 - Velocidade de recarga \n" + "6 - Cadencia \n" + "7 - Tamanho do carregador \n"));
            }
            
            weaponExotic.catalyst(statsToIncremment);
        }
        
        season8.addWeaponExotic(weaponExotic);
    }//GEN-LAST:event_buttonAddExoticWeaponActionPerformed

    private void buttonAddOrnamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddOrnamentActionPerformed
        String name = JOptionPane.showInputDialog(null, "Informe o nome do ornamento:");
        String nomeDoItem = JOptionPane.showInputDialog(null, "Informe o nome do item em que deve ser usado esse ornamento:");

        Ornament ornament = new Ornament(name, nomeDoItem);
        season8.addOrnament(ornament);
    }//GEN-LAST:event_buttonAddOrnamentActionPerformed

    private void buttonLocalSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLocalSaveActionPerformed
        try{ 
            FileOutputStream fileOutput = new FileOutputStream("src/files/season8Save.ser");         
            ObjectOutputStream objOutput = new ObjectOutputStream(fileOutput);   

            objOutput.writeObject(season8);     
            objOutput.close();

            JOptionPane.showMessageDialog(null, "Salvo com sucesso!");
  
       }catch(Exception ex){
            ex.printStackTrace();
       }
    }//GEN-LAST:event_buttonLocalSaveActionPerformed

    private void buttonLocalImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLocalImportActionPerformed
        try{
            FileInputStream fileInput = new FileInputStream("src/files/season8Save.ser");
            ObjectInputStream objInput = new ObjectInputStream(fileInput);

            season8 = (Season8) objInput.readObject();
            objInput.close();

            JOptionPane.showMessageDialog(null, "Importação bem sucedida!");
  
       }catch(Exception ex){
            ex.printStackTrace(); 
       }
    }//GEN-LAST:event_buttonLocalImportActionPerformed

    private void buttonClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClassesActionPerformed
        String itens = "";
        
        for (int i = 0; i < season8.getClasses().size(); i++) {
            itens += "Classe n° " + (i+1) +"\n";
            itens += "Nome: " + season8.getClasses().get(i).getName()+"\n";
            itens += "Raça: " + season8.getClasses().get(i).getRace()+"\n" + "\n";
        }
        
        if(itens == ""){
            JOptionPane.showMessageDialog(null, "Categoria vazia!");
        }else{
            JOptionPane.showMessageDialog(null, itens);
        }
    }//GEN-LAST:event_buttonClassesActionPerformed

    
    private void buttonSubclassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubclassesActionPerformed
        String itens = "";
        
        for (int i = 0; i < season8.getSubclasses().size(); i++) {
            itens += "Subclasse n° " + (i+1) +"\n";
            itens += "Classe: " + season8.getSubclasses().get(i).getName()+"\n";
            itens += "Raça: " + season8.getSubclasses().get(i).getRace()+"\n";
            itens += "Super habilidade: \n";
            itens += "Nome: " + season8.getSubclasses().get(i).getSuperAbility().getName()+"\n";
            itens += "Descrição: " + season8.getSubclasses().get(i).getSuperAbility().getDescription()+"\n";
            itens += "Habilidade de pulo: \n";
            itens += "Nome: " + season8.getSubclasses().get(i).getJumpingAbility().getName()+"\n";
            itens += "Descrição: " + season8.getSubclasses().get(i).getJumpingAbility().getDescription()+"\n";
            itens += "Habilidade de granada: \n";
            itens += "Nome: " + season8.getSubclasses().get(i).getGrenadeAbility().getName()+"\n";
            itens += "Descrição: " + season8.getSubclasses().get(i).getGrenadeAbility().getDescription()+"\n";
            itens += "Habilidade de classe: \n";
            itens += "Nome: " + season8.getSubclasses().get(i).getClassAbility().getName()+"\n";
            itens += "Descrição: " + season8.getSubclasses().get(i).getClassAbility().getDescription()+"\n" + "\n";
        }
        
        if(itens.equals("")){
            JOptionPane.showMessageDialog(null, "Categoria vazia!");
        }else{
            JOptionPane.showMessageDialog(null, itens);
        }
    }//GEN-LAST:event_buttonSubclassesActionPerformed

    private void buttonArmorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonArmorsActionPerformed
        String itens = "";
        
        for (int i = 0; i < season8.getArmors().size(); i++) {
            itens += "Armadura n° " + (i+1) +"\n";
            itens += "Nome: " + season8.getArmors().get(i).getNome()+"\n";
            itens += "Descrição: " + season8.getArmors().get(i).getDescription()+"\n";
            itens += "Classe do item: " + season8.getArmors().get(i).getGearClass()+"\n";
            itens += "Mobilidade: " + season8.getArmors().get(i).getMobility()+"\n";
            itens += "Resiliênca: " + season8.getArmors().get(i).getResilience()+"\n";
            itens += "Recuperação: " + season8.getArmors().get(i).getRecovery()+"\n";
            itens += "Disciplina: " + season8.getArmors().get(i).getDiscipline()+"\n";
            itens += "Intelecto: " + season8.getArmors().get(i).getIntelect()+"\n";
            itens += "Força: " + season8.getArmors().get(i).getStrength()+"\n" + "\n";
        }
        
        if(itens.equals("")){
            JOptionPane.showMessageDialog(null, "Categoria vazia!");
        }else{
            JOptionPane.showMessageDialog(null, itens);
        }
    }//GEN-LAST:event_buttonArmorsActionPerformed

    private void buttonExoticArmorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExoticArmorsActionPerformed
        String itens = "";
        
        for (int i = 0; i < season8.getExotics().getArmorExotic().size(); i++) {
            itens += "Armadura Exótica n° " + (i+1) +"\n";
            itens += "Nome: " + season8.getExotics().getArmorExotic().get(i).getNome()+"\n";
            itens += "Perk especial de exótico: " + season8.getExotics().getArmorExotic().get(i).getExoticSpecialPerk() + "\n";
            itens += "Descrição: " + season8.getExotics().getArmorExotic().get(i).getDescription()+"\n";
            itens += "Classe do item: " + season8.getExotics().getArmorExotic().get(i).getGearClass()+"\n";
            itens += "Mobilidade: " + season8.getExotics().getArmorExotic().get(i).getMobility()+"\n";
            itens += "Resiliênca: " + season8.getExotics().getArmorExotic().get(i).getResilience()+"\n";
            itens += "Recuperação: " + season8.getExotics().getArmorExotic().get(i).getRecovery()+"\n";
            itens += "Disciplina: " + season8.getExotics().getArmorExotic().get(i).getDiscipline()+"\n";
            itens += "Intelecto: " + season8.getExotics().getArmorExotic().get(i).getIntelect()+"\n";
            itens += "Força: " + season8.getExotics().getArmorExotic().get(i).getStrength()+"\n" + "\n";
        }
        
        if(itens.equals("")){
            JOptionPane.showMessageDialog(null, "Categoria vazia!");
        }else{
            JOptionPane.showMessageDialog(null, itens);
        }
    }//GEN-LAST:event_buttonExoticArmorsActionPerformed

    private void buttonWeaponsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWeaponsActionPerformed
        String itens = "";
        
        for (int i = 0; i < season8.getWeapons().size(); i++) {
            itens += "Arma n° " + (i+1) +"\n";
            itens += "Nome: " + season8.getWeapons().get(i).getNome()+"\n";
            itens += "Descrição: " + season8.getWeapons().get(i).getDescription()+"\n";
            itens += "Tipo: " + season8.getWeapons().get(i).getType()+"\n";
            itens += "Impacto: " + season8.getWeapons().get(i).getImpact()+"\n";
            itens += "Estabilidade: " + season8.getWeapons().get(i).getStability()+"\n";
            itens += "Manuseio: " + season8.getWeapons().get(i).getHandling()+"\n";
            itens += "Velocidade de recarga: " + season8.getWeapons().get(i).getReloadSpeed()+"\n";
            itens += "Cadência: " + season8.getWeapons().get(i).getRoundsPerMinute()+"\n";
            itens += "Tamanho do carregador: " + season8.getWeapons().get(i).getMagazine()+"\n" + "\n";
        }
        
        if(itens.equals("")){
            JOptionPane.showMessageDialog(null, "Categoria vazia!");
        }else{
            JOptionPane.showMessageDialog(null, itens);
        }
    }//GEN-LAST:event_buttonWeaponsActionPerformed

    private void buttonExoticWeaponsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExoticWeaponsActionPerformed
        String itens = "";
        
        for (int i = 0; i < season8.getExotics().getWeaponExotic().size(); i++) {
            itens += "Arma Exótica n° " + (i+1) +"\n";
            itens += "Nome: " + season8.getExotics().getWeaponExotic().get(i).getNome()+"\n";
            itens += "Descrição: " + season8.getExotics().getWeaponExotic().get(i).getDescription()+"\n";
            itens += "Tipo: " + season8.getExotics().getWeaponExotic().get(i).getType()+"\n";
            itens += "Impacto: " + season8.getExotics().getWeaponExotic().get(i).getImpact()+"\n";
            itens += "Estabilidade: " + season8.getExotics().getWeaponExotic().get(i).getStability()+"\n";
            itens += "Manuseio: " + season8.getExotics().getWeaponExotic().get(i).getHandling()+"\n";
            itens += "Velocidade de recarga: " + season8.getExotics().getWeaponExotic().get(i).getReloadSpeed()+"\n";
            itens += "Cadência: " + season8.getExotics().getWeaponExotic().get(i).getRoundsPerMinute()+"\n";
            itens += "Tamanho do carregador: " + season8.getExotics().getWeaponExotic().get(i).getMagazine()+"\n" + "\n";
        }
        
        if(itens.equals("")){
            JOptionPane.showMessageDialog(null, "Categoria vazia!");
        }else{
            JOptionPane.showMessageDialog(null, itens);
        }
    }//GEN-LAST:event_buttonExoticWeaponsActionPerformed

    private void buttonOrnamentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOrnamentsActionPerformed
        String itens = "";
        
        for (int i = 0; i < season8.getOrnaments().size(); i++) {
            itens += "Ornamento n° " + (i+1) +"\n";
            itens += "Nome: " + season8.getOrnaments().get(i).getNome()+"\n";
            itens += "Item: " + season8.getOrnaments().get(i).getNomeDoItem()+"\n" + "\n";
        }
        
        if(itens.equals("")){
            JOptionPane.showMessageDialog(null, "Categoria vazia!");
        }else{
            JOptionPane.showMessageDialog(null, itens);
        }
    }//GEN-LAST:event_buttonOrnamentsActionPerformed

    private void buttonRemoveOrnamentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveOrnamentActionPerformed
        int n;
        
        try {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o número do ornamento que você deseja remover"));
        } catch (Exception e) {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS. \n" + "Informe o número do ornamento que você deseja remover"));
        }
        
        try {
            season8.getOrnaments().remove(n-1);
            
            JOptionPane.showMessageDialog(null, "Ornamento removida com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Esse ornamento não existe, tente novamente.");
        }
    }//GEN-LAST:event_buttonRemoveOrnamentActionPerformed

    private void buttonRemoveExoticWeaponActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveExoticWeaponActionPerformed
        int n;
        
        try {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o número da arma exótica que você deseja remover"));
        } catch (Exception e) {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS. \n" + "Informe o número da arma exótica que você deseja remover"));
        }
        
        try {
            season8.getExotics().getWeaponExotic().remove(n-1);
            
            JOptionPane.showMessageDialog(null, "Arma exótica removida com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Essa arma exótica não existe, tente novamente.");
        }
    }//GEN-LAST:event_buttonRemoveExoticWeaponActionPerformed

    private void buttonRemoveWeaponActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveWeaponActionPerformed
        int n;
        
        try {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o número da arma que você deseja remover"));
        } catch (Exception e) {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS. \n" + "Informe o número da arma que você deseja remover"));
        }
        
        try {
            season8.getWeapons().remove(n-1);
            
            JOptionPane.showMessageDialog(null, "Arma removida com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Essa arma não existe, tente novamente.");
        }
    }//GEN-LAST:event_buttonRemoveWeaponActionPerformed

    private void buttonRemoveExoticArmorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveExoticArmorActionPerformed
        int n;
        
        try {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o número da armadura exótica que você deseja remover"));
        } catch (Exception e) {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS. \n" + "Informe o número da armadura exótica que você deseja remover"));
        }
        
        try {
            season8.getExotics().getArmorExotic().remove(n-1);
            
            JOptionPane.showMessageDialog(null, "Armadura exótica removida com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Essa armadura exótica não existe, tente novamente.");
        }
    }//GEN-LAST:event_buttonRemoveExoticArmorActionPerformed

    private void buttonRemoveArmorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveArmorActionPerformed
        int n;
        
        try {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o número da armadura que você deseja remover"));
        } catch (Exception e) {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS. \n" + "Informe o número da armadura que você deseja remover"));
        }
        
        try {
            season8.getArmors().remove(n-1);
            
            JOptionPane.showMessageDialog(null, "Armadura removida com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Essa armadura não existe, tente novamente.");
        }
    }//GEN-LAST:event_buttonRemoveArmorActionPerformed

    private void buttonRemoveSubclassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveSubclassActionPerformed
        int n;
        
        try {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o número da subclasse que você deseja remover"));
        } catch (Exception e) {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS. \n" + "Informe o número da subclasse que você deseja remover"));
        }
        
        try {
            season8.getSubclasses().remove(n-1);
            
            JOptionPane.showMessageDialog(null, "Subclasse removida com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Essa subclasse não existe, tente novamente.");
        }
    }//GEN-LAST:event_buttonRemoveSubclassActionPerformed

    private void buttonRemoveClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveClassActionPerformed
        int n;
        
        try {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "Informe o número da classe que você deseja remover"));
        } catch (Exception e) {
            n = Integer.parseInt(JOptionPane.showInputDialog(null, "INFORME SOMENTE NÚMEROS INTEIROS. \n" + "Informe o número da classe que você deseja remover"));
        }
        
        try {
            season8.getClasses().remove(n-1);
            
            JOptionPane.showMessageDialog(null, "Classe removida com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Essa classe não existe, tente novamente.");
        }
    }//GEN-LAST:event_buttonRemoveClassActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonAddArmor;
    private javax.swing.JButton buttonAddClass;
    private javax.swing.JButton buttonAddExoticArmor;
    private javax.swing.JButton buttonAddExoticWeapon;
    private javax.swing.JButton buttonAddOrnament;
    private javax.swing.JButton buttonAddSubclass;
    private javax.swing.JButton buttonAddWeapon;
    private javax.swing.JButton buttonArmors;
    private javax.swing.JButton buttonBuild;
    private javax.swing.JButton buttonClasses;
    private javax.swing.JButton buttonExoticArmors;
    private javax.swing.JButton buttonExoticWeapons;
    private javax.swing.JButton buttonLocalImport;
    private javax.swing.JButton buttonLocalSave;
    private javax.swing.JButton buttonOrnaments;
    private javax.swing.JButton buttonRemoveArmor;
    private javax.swing.JButton buttonRemoveClass;
    private javax.swing.JButton buttonRemoveExoticArmor;
    private javax.swing.JButton buttonRemoveExoticWeapon;
    private javax.swing.JButton buttonRemoveOrnament;
    private javax.swing.JButton buttonRemoveSubclass;
    private javax.swing.JButton buttonRemoveWeapon;
    private javax.swing.JButton buttonSubclasses;
    private javax.swing.JButton buttonWeapons;
    private javax.swing.JLabel labelEscolha;
    private javax.swing.JLabel labelInstrução;
    private javax.swing.JLabel labelInstrução1;
    private javax.swing.JLabel labelInstrução2;
    private javax.swing.JLabel labelWelcome;
    private javax.swing.JTabbedPane pane;
    private javax.swing.JPanel paneAdd;
    private javax.swing.JPanel paneDatabase;
    private javax.swing.JPanel paneHome;
    private javax.swing.JPanel paneRemove;
    // End of variables declaration//GEN-END:variables
}
